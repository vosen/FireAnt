// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace FireAnt.Transport {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Transport {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_FireAnt_Transport_TestCase__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FireAnt.Transport.TestCase, global::FireAnt.Transport.TestCase.Builder> internal__static_FireAnt_Transport_TestCase__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_FireAnt_Transport_TestResultSummary__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FireAnt.Transport.TestResultSummary, global::FireAnt.Transport.TestResultSummary.Builder> internal__static_FireAnt_Transport_TestResultSummary__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Transport() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9UcmFuc3BvcnQucHJvdG8SEUZpcmVBbnQuVHJhbnNwb3J0IigKCFRlc3RD", 
            "YXNlEgwKBFR5cGUYASACKAkSDgoGTWV0aG9kGAIgAigJItMBChFUZXN0UmVz", 
            "dWx0U3VtbWFyeRITCgtEaXNwbGF5TmFtZRgBIAIoCRItCgZSZXN1bHQYAiAC", 
            "KA4yHS5GaXJlQW50LlRyYW5zcG9ydC5UZXN0UmVzdWx0EgwKBFRpbWUYAyAB", 
            "KAESFQoNRXhjZXB0aW9uVHlwZRgEIAEoCRIYChBFeGNlcHRpb25NZXNzYWdl", 
            "GAUgASgJEhsKE0V4Y2VwdGlvblN0YWNrVHJhY2UYBiABKAkSDgoGUmVhc29u", 
            "GAcgASgJEg4KBk91dHB1dBgIIAEoCSoqCgpUZXN0UmVzdWx0EggKBFBhc3MQ", 
          "ARIICgRGYWlsEAISCAoEU2tpcBADQgJIAQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_FireAnt_Transport_TestCase__Descriptor = Descriptor.MessageTypes[0];
        internal__static_FireAnt_Transport_TestCase__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FireAnt.Transport.TestCase, global::FireAnt.Transport.TestCase.Builder>(internal__static_FireAnt_Transport_TestCase__Descriptor,
                new string[] { "Type", "Method", });
        internal__static_FireAnt_Transport_TestResultSummary__Descriptor = Descriptor.MessageTypes[1];
        internal__static_FireAnt_Transport_TestResultSummary__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FireAnt.Transport.TestResultSummary, global::FireAnt.Transport.TestResultSummary.Builder>(internal__static_FireAnt_Transport_TestResultSummary__Descriptor,
                new string[] { "DisplayName", "Result", "Time", "ExceptionType", "ExceptionMessage", "ExceptionStackTrace", "Reason", "Output", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum TestResult {
    Pass = 1,
    Fail = 2,
    Skip = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestCase : pb::GeneratedMessage<TestCase, TestCase.Builder> {
    private TestCase() { }
    private static readonly TestCase defaultInstance = new TestCase().MakeReadOnly();
    private static readonly string[] _testCaseFieldNames = new string[] { "Method", "Type" };
    private static readonly uint[] _testCaseFieldTags = new uint[] { 18, 10 };
    public static TestCase DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TestCase DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TestCase ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FireAnt.Transport.Transport.internal__static_FireAnt_Transport_TestCase__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TestCase, TestCase.Builder> InternalFieldAccessors {
      get { return global::FireAnt.Transport.Transport.internal__static_FireAnt_Transport_TestCase__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int MethodFieldNumber = 2;
    private bool hasMethod;
    private string method_ = "";
    public bool HasMethod {
      get { return hasMethod; }
    }
    public string Method {
      get { return method_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasMethod) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _testCaseFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[1], Type);
      }
      if (hasMethod) {
        output.WriteString(2, field_names[0], Method);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Type);
      }
      if (hasMethod) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Method);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TestCase ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TestCase ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TestCase ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TestCase ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TestCase ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TestCase ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TestCase ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TestCase ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TestCase ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TestCase ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TestCase MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TestCase prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TestCase, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TestCase cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TestCase result;
      
      private TestCase PrepareBuilder() {
        if (resultIsReadOnly) {
          TestCase original = result;
          result = new TestCase();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TestCase MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FireAnt.Transport.TestCase.Descriptor; }
      }
      
      public override TestCase DefaultInstanceForType {
        get { return global::FireAnt.Transport.TestCase.DefaultInstance; }
      }
      
      public override TestCase BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TestCase) {
          return MergeFrom((TestCase) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TestCase other) {
        if (other == global::FireAnt.Transport.TestCase.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasMethod) {
          Method = other.Method;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_testCaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _testCaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              result.hasMethod = input.ReadString(ref result.method_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasMethod {
        get { return result.hasMethod; }
      }
      public string Method {
        get { return result.Method; }
        set { SetMethod(value); }
      }
      public Builder SetMethod(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethod = true;
        result.method_ = value;
        return this;
      }
      public Builder ClearMethod() {
        PrepareBuilder();
        result.hasMethod = false;
        result.method_ = "";
        return this;
      }
    }
    static TestCase() {
      object.ReferenceEquals(global::FireAnt.Transport.Transport.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestResultSummary : pb::GeneratedMessage<TestResultSummary, TestResultSummary.Builder> {
    private TestResultSummary() { }
    private static readonly TestResultSummary defaultInstance = new TestResultSummary().MakeReadOnly();
    private static readonly string[] _testResultSummaryFieldNames = new string[] { "DisplayName", "ExceptionMessage", "ExceptionStackTrace", "ExceptionType", "Output", "Reason", "Result", "Time" };
    private static readonly uint[] _testResultSummaryFieldTags = new uint[] { 10, 42, 50, 34, 66, 58, 16, 25 };
    public static TestResultSummary DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TestResultSummary DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TestResultSummary ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FireAnt.Transport.Transport.internal__static_FireAnt_Transport_TestResultSummary__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TestResultSummary, TestResultSummary.Builder> InternalFieldAccessors {
      get { return global::FireAnt.Transport.Transport.internal__static_FireAnt_Transport_TestResultSummary__FieldAccessorTable; }
    }
    
    public const int DisplayNameFieldNumber = 1;
    private bool hasDisplayName;
    private string displayName_ = "";
    public bool HasDisplayName {
      get { return hasDisplayName; }
    }
    public string DisplayName {
      get { return displayName_; }
    }
    
    public const int ResultFieldNumber = 2;
    private bool hasResult;
    private global::FireAnt.Transport.TestResult result_ = global::FireAnt.Transport.TestResult.Pass;
    public bool HasResult {
      get { return hasResult; }
    }
    public global::FireAnt.Transport.TestResult Result {
      get { return result_; }
    }
    
    public const int TimeFieldNumber = 3;
    private bool hasTime;
    private double time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public double Time {
      get { return time_; }
    }
    
    public const int ExceptionTypeFieldNumber = 4;
    private bool hasExceptionType;
    private string exceptionType_ = "";
    public bool HasExceptionType {
      get { return hasExceptionType; }
    }
    public string ExceptionType {
      get { return exceptionType_; }
    }
    
    public const int ExceptionMessageFieldNumber = 5;
    private bool hasExceptionMessage;
    private string exceptionMessage_ = "";
    public bool HasExceptionMessage {
      get { return hasExceptionMessage; }
    }
    public string ExceptionMessage {
      get { return exceptionMessage_; }
    }
    
    public const int ExceptionStackTraceFieldNumber = 6;
    private bool hasExceptionStackTrace;
    private string exceptionStackTrace_ = "";
    public bool HasExceptionStackTrace {
      get { return hasExceptionStackTrace; }
    }
    public string ExceptionStackTrace {
      get { return exceptionStackTrace_; }
    }
    
    public const int ReasonFieldNumber = 7;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public const int OutputFieldNumber = 8;
    private bool hasOutput;
    private string output_ = "";
    public bool HasOutput {
      get { return hasOutput; }
    }
    public string Output {
      get { return output_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDisplayName) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _testResultSummaryFieldNames;
      if (hasDisplayName) {
        output.WriteString(1, field_names[0], DisplayName);
      }
      if (hasResult) {
        output.WriteEnum(2, field_names[6], (int) Result, Result);
      }
      if (hasTime) {
        output.WriteDouble(3, field_names[7], Time);
      }
      if (hasExceptionType) {
        output.WriteString(4, field_names[3], ExceptionType);
      }
      if (hasExceptionMessage) {
        output.WriteString(5, field_names[1], ExceptionMessage);
      }
      if (hasExceptionStackTrace) {
        output.WriteString(6, field_names[2], ExceptionStackTrace);
      }
      if (hasReason) {
        output.WriteString(7, field_names[5], Reason);
      }
      if (hasOutput) {
        output.WriteString(8, field_names[4], Output);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDisplayName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, DisplayName);
      }
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Result);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Time);
      }
      if (hasExceptionType) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ExceptionType);
      }
      if (hasExceptionMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(5, ExceptionMessage);
      }
      if (hasExceptionStackTrace) {
        size += pb::CodedOutputStream.ComputeStringSize(6, ExceptionStackTrace);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeStringSize(7, Reason);
      }
      if (hasOutput) {
        size += pb::CodedOutputStream.ComputeStringSize(8, Output);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TestResultSummary ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TestResultSummary ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TestResultSummary ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TestResultSummary ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TestResultSummary ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TestResultSummary ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TestResultSummary ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TestResultSummary ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TestResultSummary ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TestResultSummary ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TestResultSummary MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TestResultSummary prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TestResultSummary, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TestResultSummary cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TestResultSummary result;
      
      private TestResultSummary PrepareBuilder() {
        if (resultIsReadOnly) {
          TestResultSummary original = result;
          result = new TestResultSummary();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TestResultSummary MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FireAnt.Transport.TestResultSummary.Descriptor; }
      }
      
      public override TestResultSummary DefaultInstanceForType {
        get { return global::FireAnt.Transport.TestResultSummary.DefaultInstance; }
      }
      
      public override TestResultSummary BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TestResultSummary) {
          return MergeFrom((TestResultSummary) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TestResultSummary other) {
        if (other == global::FireAnt.Transport.TestResultSummary.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDisplayName) {
          DisplayName = other.DisplayName;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasExceptionType) {
          ExceptionType = other.ExceptionType;
        }
        if (other.HasExceptionMessage) {
          ExceptionMessage = other.ExceptionMessage;
        }
        if (other.HasExceptionStackTrace) {
          ExceptionStackTrace = other.ExceptionStackTrace;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasOutput) {
          Output = other.Output;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_testResultSummaryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _testResultSummaryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDisplayName = input.ReadString(ref result.displayName_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.result_, out unknown)) {
                result.hasResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 25: {
              result.hasTime = input.ReadDouble(ref result.time_);
              break;
            }
            case 34: {
              result.hasExceptionType = input.ReadString(ref result.exceptionType_);
              break;
            }
            case 42: {
              result.hasExceptionMessage = input.ReadString(ref result.exceptionMessage_);
              break;
            }
            case 50: {
              result.hasExceptionStackTrace = input.ReadString(ref result.exceptionStackTrace_);
              break;
            }
            case 58: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
            case 66: {
              result.hasOutput = input.ReadString(ref result.output_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDisplayName {
        get { return result.hasDisplayName; }
      }
      public string DisplayName {
        get { return result.DisplayName; }
        set { SetDisplayName(value); }
      }
      public Builder SetDisplayName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayName = true;
        result.displayName_ = value;
        return this;
      }
      public Builder ClearDisplayName() {
        PrepareBuilder();
        result.hasDisplayName = false;
        result.displayName_ = "";
        return this;
      }
      
      public bool HasResult {
       get { return result.hasResult; }
      }
      public global::FireAnt.Transport.TestResult Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(global::FireAnt.Transport.TestResult value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = global::FireAnt.Transport.TestResult.Pass;
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public double Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(double value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0D;
        return this;
      }
      
      public bool HasExceptionType {
        get { return result.hasExceptionType; }
      }
      public string ExceptionType {
        get { return result.ExceptionType; }
        set { SetExceptionType(value); }
      }
      public Builder SetExceptionType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExceptionType = true;
        result.exceptionType_ = value;
        return this;
      }
      public Builder ClearExceptionType() {
        PrepareBuilder();
        result.hasExceptionType = false;
        result.exceptionType_ = "";
        return this;
      }
      
      public bool HasExceptionMessage {
        get { return result.hasExceptionMessage; }
      }
      public string ExceptionMessage {
        get { return result.ExceptionMessage; }
        set { SetExceptionMessage(value); }
      }
      public Builder SetExceptionMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExceptionMessage = true;
        result.exceptionMessage_ = value;
        return this;
      }
      public Builder ClearExceptionMessage() {
        PrepareBuilder();
        result.hasExceptionMessage = false;
        result.exceptionMessage_ = "";
        return this;
      }
      
      public bool HasExceptionStackTrace {
        get { return result.hasExceptionStackTrace; }
      }
      public string ExceptionStackTrace {
        get { return result.ExceptionStackTrace; }
        set { SetExceptionStackTrace(value); }
      }
      public Builder SetExceptionStackTrace(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExceptionStackTrace = true;
        result.exceptionStackTrace_ = value;
        return this;
      }
      public Builder ClearExceptionStackTrace() {
        PrepareBuilder();
        result.hasExceptionStackTrace = false;
        result.exceptionStackTrace_ = "";
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
      
      public bool HasOutput {
        get { return result.hasOutput; }
      }
      public string Output {
        get { return result.Output; }
        set { SetOutput(value); }
      }
      public Builder SetOutput(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOutput = true;
        result.output_ = value;
        return this;
      }
      public Builder ClearOutput() {
        PrepareBuilder();
        result.hasOutput = false;
        result.output_ = "";
        return this;
      }
    }
    static TestResultSummary() {
      object.ReferenceEquals(global::FireAnt.Transport.Transport.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
